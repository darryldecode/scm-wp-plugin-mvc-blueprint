var SCM_BLUEPRINT_CATEGORY_MODULE = angular.module('SCM_BLUEPRINT_CATEGORY_MODULE', ['SCM_COMMON_SERVICE_MODULE','ui.bootstrap','ui.tree']);SCM_BLUEPRINT_CATEGORY_MODULE.controller('CategoryController', ['$q','$http','$scope','GlobalLoaderService',function($q,$http,$scope,GlobalLoaderService) {    console.log('CategoryController Booted');    var categoryCtrl = this;    categoryCtrl.category = {        init: function() {            categoryCtrl.category.ajax.getCategories(function(success) {                categoryCtrl.category.data.categories = success.data.data;                console.log(categoryCtrl.category.data.categories);            },function(error){                console.log(error);            });        },        indicators: {            isListLoading: true,            isSaving: false        },        inputs: {            category: {            },            categoryGroup: {                name: '',                active: true            }        },        data: {            categories: [],            categoriesAll: []        },        ajax: {            getCategories: function(successCb,errorCb) {                $http({                    url: SCM_BLUEPRINT_DATA.SCM_BLUEPRINT_API_ENDPOINT+'state=Category&action=ajaxGetAllGroupCategories',                    method: 'GET',                    params: {}                }).then(function(success) {                    successCb(success);                },function(error) {                    errorCb(error);                });            },            postCreate: function(data,successCb,errorCb) {                data._nonce = SCM_BLUEPRINT_DATA._nonce;                $http({                    url: SCM_BLUEPRINT_DATA.SCM_BLUEPRINT_API_ENDPOINT+'state=Category&action=ajaxPostCreate',                    method: 'POST',                    data: data                }).then(function(success) {                    successCb(success);                },function(error) {                    errorCb(error);                });            },            postUpdate: function(data,successCb,errorCb) {                data._nonce = SCM_BLUEPRINT_DATA._nonce;                $http({                    url: SCM_BLUEPRINT_DATA.SCM_BLUEPRINT_API_ENDPOINT+'state=Category&action=ajaxPostUpdate',                    method: 'POST',                    data: data                }).then(function(success) {                    successCb(success);                },function(error) {                    errorCb(error);                });            }        },        buttons: {            save: function() {                GlobalLoaderService.show("Saving..","info");                categoryCtrl.category.indicators.isSaving = true;                categoryCtrl.category.ajax.postCreate({                    name: categoryCtrl.category.inputs.categoryGroup.name,                    active: categoryCtrl.category.inputs.categoryGroup.active                },function(response) {                    if(!response.data.success) {                        GlobalLoaderService.show(response.data.message,"danger").hide();                    } else {                        GlobalLoaderService.show(response.data.message,"success").hide();                        // reset                        categoryCtrl.category.inputs.categoryGroup.name = '';                        categoryCtrl.category.inputs.categoryGroup.active = true;                        // reload categories                        categoryCtrl.category.ajax.getCategories(function(success) {                            categoryCtrl.category.data.categories = success.data.data;                        },function(error){                            console.log(error);                        });                    }                    categoryCtrl.category.indicators.isSaving = false;                },function(error) {                    GlobalLoaderService.show(error.message,"danger").hide();                    categoryCtrl.category.indicators.isSaving = false;                });            },            addNode: function(categoryGroup) {                if(!categoryGroup.hasOwnProperty("newNode")) {                    GlobalLoaderService.show("Category Name/Slug is required!","danger").hide();                    return false;                }                if(categoryGroup.newNode.name=='' || categoryGroup.newNode.name_slug=='') {                    GlobalLoaderService.show("Category Name/Slug is required!","danger").hide();                    return false;                }                categoryGroup.data.push({                    name: categoryGroup.newNode.name,                    name_slug: categoryGroup.newNode.name_slug,                    icon: categoryGroup.newNode.icon,                    image: categoryGroup.newNode.image,                    nodes: []                })            },            remove: function(scope,item) {                if(item.name_slug=='all') {                    GlobalLoaderService.show("Category \"All\" cannot be removed by default!","danger").hide();                    return false;                }                scope.remove();            },            updateGroup: function(categoryGroup) {                console.log(categoryGroup);                GlobalLoaderService.show("Updating..","info");                categoryCtrl.category.ajax.postUpdate({                    id: categoryGroup.id,                    name: categoryGroup.name,                    data: categoryGroup.data,                    active: categoryGroup.active                },function(response) {                    if(!response.data.success) {                        GlobalLoaderService.show(response.data.message,"danger").hide();                    } else {                        GlobalLoaderService.show(response.data.message,"success").hide();                        // reload categories                        categoryCtrl.category.ajax.getCategories(function(success) {                            categoryCtrl.category.data.categories = success.data.data;                        },function(error){                            console.log(error);                        });                    }                },function(error) {                    GlobalLoaderService.show(error.message,"danger").hide();                });            },            browseWordPressMedia: function(item) {                angular.element(document).ready(function(){                    var mediaUploader;                    if (mediaUploader) {                        mediaUploader.open();                        return;                    }                    mediaUploader = wp.media.frames.file_frame = wp.media({                        title: 'Choose Image',                        button: {                            text: 'Choose Image'                        }, multiple: false });                    mediaUploader.on('select', function() {                        var attachment = mediaUploader.state().get('selection').first().toJSON();                        $scope.$apply(function() {                            item.image = attachment.url;                        });                    });                    // Open the uploader dialog                    mediaUploader.open();                });            }        },        formatters: {            formatCategoriesChild: function(iCategories) {                var categoryToBeSpliced = [];                var categories = angular.copy(iCategories);                angular.forEach(categories,function(c,i) {                    if(c.parent_category_id!=0) {                        angular.forEach(categories,function(cc,ii) {                            if(cc.id==c.parent_category_id) {                                if(cc.hasOwnProperty("nodes")) {                                    cc.nodes.push(angular.copy(c));                                } else {                                    cc.nodes = [];                                    cc.nodes.push(angular.copy(c));                                }                                categoryToBeSpliced.push(i);                            }                        });                    }                });                // remove the child categories from main categories list                angular.forEach(categoryToBeSpliced,function(itemIndex) {                    categories.splice(itemIndex,1);                });                return categories;            }        }    };    categoryCtrl.category.init();}]);